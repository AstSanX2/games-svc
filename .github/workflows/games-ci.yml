name: games-ci

on:
  push:
    paths:
      - "src/**"
      - "test/**"
      - ".github/workflows/games-ci.yml"
  pull_request:
    paths:
      - "src/**"
      - "test/**"
      - ".github/workflows/games-ci.yml"

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      - name: Cache NuGet
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: (Debug) List workspace
        run: |
          echo "PWD: $(pwd)"
          echo "Tree (top 3 levels):"
          find . -maxdepth 3 -type d -print

      - name: Resolve project paths
        id: paths
        run: |
          set -euo pipefail
          # API .csproj (preferido): src/games-svc/games-svc.csproj
          if [ -f "src/games-svc/games-svc.csproj" ]; then
            API="src/games-svc/games-svc.csproj"
          else
            API=$(find . -type f -name "games-svc.csproj" -path "*/src/*" | head -n1 || true)
          fi
          if [ -z "${API:-}" ]; then
            echo "❌ API csproj não encontrado." >&2
            exit 1
          fi

          # Tests .csproj (preferido): test/games-svc.Tests/games-svc.Tests.csproj
          if [ -f "test/games-svc.Tests/games-svc.Tests.csproj" ]; then
            TEST="test/games-svc.Tests/games-svc.Tests.csproj"
          else
            TEST=$(find . -type f -name "games-svc.Tests.csproj" -path "*/test/*" | head -n1 || true)
          fi
          if [ -z "${TEST:-}" ]; then
            echo "❌ Test csproj não encontrado." >&2
            exit 1
          fi

          TEST_DIR="$(dirname "$TEST")"

          echo "api=$API"       >> "$GITHUB_OUTPUT"
          echo "test=$TEST"     >> "$GITHUB_OUTPUT"
          echo "test_dir=$TEST_DIR" >> "$GITHUB_OUTPUT"

          echo "API:      $API"
          echo "TEST:     $TEST"
          echo "TEST_DIR: $TEST_DIR"

      - name: dotnet --info
        run: dotnet --info

      - name: Restore (API)
        run: dotnet restore "${{ steps.paths.outputs.api }}"

      - name: Build (Release, API)
        run: dotnet build "${{ steps.paths.outputs.api }}" --configuration Release --no-restore

      # Rodar testes a partir da pasta do projeto de testes (evita caminho absoluto do DLL no vstest)
      - name: Restore (Tests)
        working-directory: ${{ steps.paths.outputs.test_dir }}
        run: dotnet restore

      - name: Build (Release, Tests)
        working-directory: ${{ steps.paths.outputs.test_dir }}
        run: dotnet build --configuration Release --no-restore

      - name: Test (Release)
        working-directory: ${{ steps.paths.outputs.test_dir }}
        run: dotnet test --configuration Release --no-build --collect:"XPlat Code Coverage" --logger "trx;LogFileName=test_results.trx"

      - name: Upload Test Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: games-tests-artifacts
          path: |
            ${{ steps.paths.outputs.test_dir }}/TestResults/*.trx
            ${{ steps.paths.outputs.test_dir }}/TestResults/**/coverage.cobertura.xml
            ${{ steps.paths.outputs.test_dir }}/TestResults/**/coverage.info
