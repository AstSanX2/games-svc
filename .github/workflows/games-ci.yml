name: games-ci

on:
  push:
    paths:
      - "games-svc/**"
      - ".github/workflows/games-ci.yml"
  pull_request:
    paths:
      - "games-svc/**"
      - ".github/workflows/games-ci.yml"

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      - name: Cache NuGet
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: (Debug) List workspace
        run: |
          echo "PWD: $(pwd)"
          echo "Tree (top 3 levels):"
          find . -maxdepth 3 -type d -print

      - name: Locate projects (API and Tests)
        id: paths
        run: |
          set -euo pipefail
          # API csproj: procura por 'games-svc.csproj' dentro de alguma pasta 'src'
          API=$(find . -type f -name "games-svc.csproj" -path "*/src/*" | head -n1 || true)
          if [ -z "$API" ]; then
            echo "❌ Não encontrei a API .csproj (games-svc.csproj) sob alguma pasta 'src'." >&2
            exit 1
          fi

          # Tests csproj: caminho informado por você (com tolerância a variações)
          TEST=$(find . -type f -name "games-svc.Tests.csproj" -path "*/test/*" | head -n1 || true)
          if [ -z "$TEST" ]; then
            echo "❌ Não encontrei o projeto de testes (games-svc.Tests.csproj) sob alguma pasta 'test'." >&2
            exit 1
          fi

          echo "API=$API"
          echo "TEST=$TEST"

          echo "api=$API" >> "$GITHUB_OUTPUT"
          echo "test=$TEST" >> "$GITHUB_OUTPUT"

      - name: dotnet --info
        run: dotnet --info

      - name: Restore (API)
        run: dotnet restore "${{ steps.paths.outputs.api }}"

      - name: Build (Release, API)
        run: dotnet build "${{ steps.paths.outputs.api }}" --configuration Release --no-restore

      - name: Restore (Tests)
        run: dotnet restore "${{ steps.paths.outputs.test }}"

      - name: Test (Release)
        run: dotnet test "${{ steps.paths.outputs.test }}" --configuration Release --no-build --collect:"XPlat Code Coverage" --logger "trx;LogFileName=test_results.trx"

      - name: Upload Test Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: games-tests-artifacts
          path: |
            **/TestResults/*.trx
            **/TestResults/**/coverage.cobertura.xml
            **/TestResults/**/coverage.info
